CSS

두 가지 갈림길, 1. 한계가 있지만 쉬운 방법 2. 어렵지만 근본적인 해결법

html이라는 의미있는 언어의 디자인과 관련있는 새로운 태그를 추가하는 것과
디자인에 최적화된 완전히 새로운 언어를 만드는 것 중에

무엇이 더 쉬울까?

=> html에 디자인이라는 새로운 태그를 추가하는 것이 더 쉽다, 이것이 쉬운길
But 한계가 존재

따라서 2. 어렵지만 근본적인 해결책, 디자인에 최적화된 완전히 새로운 언어
=> CSS 

쉽지만 한계가 있는 방법을 먼저 소개, 지금은 사용 X, <font>라는 태그
----------------------------

만약 <a>라는 태그가 수 억개가 있다고 가정하면? 그 태그를 아침 저녁으로
하루마다 다른 색깔로 매일같이 요청한다면? => 굉장히 힘들고 불행함.

이러한 상황을 극복하기 해주는 것 => CSS

---------------------------------------

1) <!-- 내용 -->   , 이 기호 사이에 있는 컨텐트는 없는 것으로 쳐라.

2) CSS는 HTML과는 완전히 다른 언어, 웹브라우저에게 CSS를 쓸거니깐
이것을 HTML이 아닌 CSS 문법에 따라 해석해야 된다는 것을 알려줘야 됨.
=> <style> ~ </style>

a => '웹브라우저ㅁ에게 이 웹페이지의 모든 a태그에 대해서' 라는 뜻 

<style> a {  color:컬러;   }  중괄호 및 세미클론 확인

*중요한 점 : font 태그를 쓰면 <a> 태그에 모두 font 태그를 달아야 되는 
큰 문제점이 있지만 CSS는 1억 개가 있든 10억 개가 있든, 모든 <a>에 속성을 부여.
=> 유지보수, 가독성에서 큰 장점

**CSS를 통해 중복되는, 반복되는 태그를 간결하게 나타낼 수 있음. => 중복의 제거

3) 2번과는 다르게 CSS 링크 하나만을 red컬러로 하고 싶을 때는 어떻게?
2번같은 style 태그로는 불가능, style 속성을  
  <li><a href="2.html">CSS</a></li> 에서 
style ="color:red" 를 <a>태그 안에 넣어준다.

=>   <li><a href="2.html" style ="color:red">CSS</a></li>

style 속성을 태그 안에 넣으면서 웹브라우저는 그 속성값을 css 문법에 따라
읽고 해석하여 태그에 적용함.

4) style =" " 은 HTML의 속성임, style의 속성은 그 값으로 반드시
css의 효과로 들어온다.

5) <style> 태그는 a를 누구에게 지정할지 모르기 때문에 a { } 가 필요,
=> 선택자, selector 라 부름. a { } 는 a를 선택자로 정한 것.

6) 2번과 3번 두 개의 방식이 있다. ( 태그를 직접 써서 선택자를 지정,
속성을 써서 선택자를 미지정(할 필요가 없음)하고 컬러 적용

7) 밑줄을 없애고 싶다, color:black; 다음에( ;(세미클론)은 셀럭터를 구분하기 위함임)

                    =>      text-decoration: none;(밑줄을 없애줌)

8) 현재 선택되어 있는 웹페이지 만큼은 밑줄을 긋고 싶다
=> <li><a href="2.html" style="color:red"> CSS </a> </li> 에서

<a href="2.html" style="color:red"> 안에 "color:red" 를 세미클론으로 구분하여

"color:red; text-decoration:underline" (underline 밑줄) 을 추가한다.

==> <a href="2.html" style="color:red; text-decoration:underline"

CSS만 red color와 함께 밑줄이 쳐져있는걸 확인할 수 있다.



***최종 정리 : 웹페이지에 CSS를 삽입하는 방법 1. style 태그 2. style 속성 두 가지
효과라는 것이 있다는 것.

1. 을 이용하여 하나의 선택자(a)에 여러 가지 효과(color:black;
    text-decoration: none;)를 부여할 수 있다는 것.
효과는 ;(세미클론)을 통해 구분할 수 있다는 점.

https://youtu.be/nC2-nJEXL2U 이론 설명, 영상 나중에 꼭 다시 보기

**** CSS구조와 이론
         a { 
         color:red
         } 

a => Selecotr(선택자)
color:red => Declaration(효과)
color => Property(속성)
red => value(값)
 

9) CSS 속성을 스스로 알아내기
 
WEB 이라는 저 글자를 '더 크게',  '가운데 정렬' 하고 싶지 않나? 
더 깔끔하고 보기 좋게

h1 {
    font-size:45px;   => font 조절로 글자크기 변화
    text-align: center; => 글자를 가운데 정렬
  }

Property는 검색해서 잘 나오기 때문에 굳이 암기x => 검색해서 찾아보면 된다.
혹은 에디터에서 정보를 알려줌.

10) CSS 선택자의 기본

우리가 하고자 하는 것.

1.이 웹페이지 모든 a태그(모든 링크)는 검은색으로 변경, 
2. 방문한적이 있는 링크를 보라색이 아닌 회색으로 변경, 
3. 현재 방문하고 있는 CSS 링크는 빨간색으로 변경

CSS이전에 있었던 HTML과 현재 머물고 있는 CSS를 회색으로 변경하여
사용자에게 정보를 주고 싶음.
우리가 배웠던 것으로 처리한다면, 

<li><a href="1.html" style="color:gray;">HTML</a></li>
<li><a href="2.html" style="color:gray;">CSS </a> </li>

로  style="color:gray;" 을 추가하면 되지만 '중복'이 발생하여 불편함.

HTML과 CSS를 같은 그룹으로 폰트 컬러를 부여할 것,

class 속성을 부여, class="saw" => 이것은 class=""도, saw도 html임, CSS가 아님.
saw라고 하는 class 값을 가지는 태그임.

11) 2. 방문한적이 있는 링크를 보라색이 아닌 회색으로 변경

     saw {                                            
          color:gray;    => 될까? X ==>    .saw 로 변경해야 됨.
     }                    

saw라고 쓰게되면 이 웹페이지에 있는 saw태그를 가지는 
이름의 선택자 이기 때문이다.

따라서 class값이 saw인 태그를 선택자로 하고 싶다면,

약속된 특수한 기호 '.' 를 이용하여 .saw로 써야됨. 

12) 3. 현재 방문하고 있는 CSS 링크는 빨간색으로 변경

<li><a href="2.html" class="saw">CSS </a> </li> 를
<li><a href="2.html" class="saw active">CSS </a> </li> 로

saw active로 변경하고 마찬가지로 .active { color:red; } 

13) class라고 하는 속성은 class = "saw", class = "saw active" 와 같이
여러 개의 값이 들어갈 수 있고 띄어쓰기로 구분한다는 것,

하나의 태그<a>에는 여러 개의 속성이 들어갈 수 있고 
여러 개의 클래스 선택자(.saw, .active 등)을 통해서 하나의 태그를 공동으로 
제어할 수 있다(ex) 전에 방문했던 사이트 컬러, 현재 머물고 있는 사이트 컬러 등).

but 이 방법은 적절하지 못함.

.saw와 .active 선택자가 자리가 바뀌면 제일 아래에 있는 선택자가 우선시 되어
css가 회색으로 바뀐다. 

따라서 id 선택자를 통해 이를 해결함.
<li><a href="2.html" class="saw active">CSS </a> </li> 에서
<li><a href="2.html" class="saw" id="active">CSS </a> </li>로

class = "saw" id="active"로 변경하고 

id를 선택자로 하기 위해선 #active { color:red; } 로 #을 붙여줌.
=> id는 유일 

14) 선택자, 선택자 태그 최종정리

왜 id선택자가 제일 강할까? id 선택자의 값이 active인 태그가 
이 웹페이지에서 한 번만 등장하면 그 다음부턴 저 active란 값을
쓰면 안되기 때문임.
즉, id의 값은 단 한 번만 등장해야 됨. => id는 중복되어선 안된다가 핵심.
유일무이한 값임.

***선택자 우선순위 id(#) > class(.) > 그냥 태그 선택자(ex a)
active를 썼기 때문에 이 문서에선 다른 곳에서 active가 나오면 안됨.

포괄적인 태그 선택자(a)보다 구체적인 id 선택자(#actvie)에 우선순위를
줌. 그래야 태그 선택자를 통해 전체적인 태그를 제어하고, 예외적인
것은 id 선택자를 통해 제어할 수 있도록 함. class 선택자는 중간순위로
책정.

15) 박스 모델 개념 - 테두리 쓰기

<h1> 태그는 제목태그, 화면 전체를 쓰는 것이 기본적으로 편하기 때문에 줄바꿈됨.
<a href> 링크 태그는 화면 전체를 쓰게 되어 링크 앞 뒤로 줄바꿈이 된다면
불편하기 때문에 줄바꿈을 하지 않고 컨텐트 그대로 쓰는 것이 편리함.
=> 이런 짐작을 좀 더 명확하고 분명하게 시각적으로 보는 방법은?

==> 페인트를 던지는 것, <h1> 태그와 <a href> 태그에 줄을 긋는다면 부피감을
줄 수 있다.

테두리 태그, border-?????(ex: border-width(두께), border-style:solid(점선, 실선,
단선-solid)

display:inline; => <h1> block level element 와 같이 화면 전체를 써서 줄바꿈되는
컨텐트를 줄바꿈X로 바꾸어줌) 
display:block; => <a href> inline elements 와 같이 본인 컨텐츠만 써서 줄바꿈
안되는 컨텐트를 줄바꿈 해줌)
display:none; => 컨텐트를 안보이게 함.

중복이 존재하는 h1선택자, a1선택자를 통일시키기 위해 " ,(콤마)" 를 이용함.

     h1{
       border-width:5px;
       border-color:red;
       border-style: solid;
     }
     /*
     inline elements
     */
     a{
       border-width:5px;
       border-color:red;
       border-style: solid;   에서
     }

=> h1, a{
      border-width:5px;
       border-color:red;
       border-style: solid;
       }

----------------------------------------
                또한 

       border-width:5px;
       border-color:red;
       border-style: solid; 를 

   =>  border: 5px solid red;

로 중복을 없애고 줄여서 적을 수 있음. (5px solid red의 순서는 상관x)

h1, a{
     border: 5px solid red;
       }

16) 박스 모델의 개념

컨텐트와 테두리 사이에 여백(간격)을 주고 싶으면
padding:픽셀크기;
-------------------------------------------------------------
 <h1>CSS</h1>
 <h1>CSS</h1>  두 개 넣으면 테두리와 테두리 사이에 간격이 생김.
테두리와 테두리 사이의 간격을 조절하고 싶다면?
margin:픽셀크키;

<h1>는 block level element이기 때문에 display:block;가 생략되어 있는 상태,
이런 화면 전체를 쓰는 block level element의 상태를 바꾸고 싶다면

width:100px; 를 추가하면 됨. (넓이가 좁아짐)

17) 박스 모델의 개념 - css box model 검색해보기

***개발자도구 이용하기
내가 만든 box.html 사이트 접속, f12 혹은 페이지 아무대나 마우스 우클릭
 report(검사) => elements 그리고 밑에 styles를 눌러서
확인하면 이 h1태그가 어떤 CSS의 style의 영향을 받고 있는지 일목요연하게
명시되어 있는 굉장히 유용한 기능. 스크롤 해서 내리면 컨텐트의 
컨텐트의 넓이, 높이 // padding // border // margin 이 보임.

****최종정리
화면 전체를 쓰는 컨텐트 = block level element
자기 크기만 갖는 컨텐트 = inline elements
컨텐트의 폭, 넓이, 크기 = width
컨텐트와 테두리 사이의 간격 = padding
테두리와 테두리 사이의 간격 = margin 
테두리의 속성, 컬러 등등 = border: 속성들;

18) 박스모델 써먹기
 
box.html -> 2.html 로 넘아가서 할 것.

제목에 밑줄 길게 긋기 위해서는 어떻게 해야 될까?

박스모델(테두리)을 응용, h1태그에 border:1px solid gray;를 추가

h1 {
    font-size:45px;
    text-align: center;
   *border:1px solid gray;
  }

그러나 우리는 테두리가 아닌 밑줄이 필요하기 때문에 

border:1px solid gray; => border-bottom:1px solid gray; 로 바꿔줌.

WEB이 너무 아래로 붕 가라앉은 느낌, 깔끔하게 만들어주자.
=> 2.html 사이트에서 오른쪽 마우스, report(검사) 누르고 박스를 확인해보면
황토색(margin)은 뭐 때문에 저런걸까 ? = > margin 값 때문임을 확인가능.

따라서, margin 값을 없애줘야 됨. margin:0;을 추가

h1 {
    font-size:45px;
    text-align: center;
    border:1px solid gray;
   *margin:0;
  }

너무 밑줄과 상단에 타이트하게 붙어있는거 같은데? => padding 을 추가

h1 {
    font-size:45px;
    text-align: center;
    border:1px solid gray;
    margin:0;
   *padding:20px;
  }

------------컨텐트, 테두리(밑줄, 가로줄) 조절 완료-----------------

이제 본문 라인에서 목차(리스트)와 설명을 구분 지어주는 세로줄을 만들어 보자.

이 예제의 목차(리스트)는 어디에?

<ol>
    <li><a href="1.html" class="saw">HTML</a></li>
    <li><a href="2.html" class="saw" id="active">CSS </a> </li>
    <li><a href="3.html">JavaScript</a></li>
  </ol>

따라서 ol 태그를 선택자로 지정하고 border-right:1px solid: gray; 추가

  ol {
    border-right:1px solid gray;
  }

너무 오른쪽에 선이 가있으므로 width:폭 을 조절하여 추가

 ol {
    border-right:1px solid gray;
    width:100px;
  }

마찬가지로 페이지 검사하여 콘텐트와 테두리 크기, 폭 조절하여
문제 파악하고 추가( margin이 문제이므로, margin:0; 추가)

 ol {
    border-right:1px solid gray;
    width:100px;
    margin:0;
  }

너무 타이트하게 콘텐트가 위로 붙어있지 않나? => padding 값 추가


 ol {
    border-right:1px solid gray;
    width:100px;
    margin:0;
    padding:20px;
  }

다 하고 나니깐 밑줄 왼쪽에 여백이? => 페이지 검사 해보니
body태그의 margin 값이 문제임 => body 선택자 지정하고
margin속성 추가

body {
   margin:0;
       }  

추가해주며 됨.

19) 기획서의 목차(목록, 리스트)와 본문이 세로줄로 구분되어 
나란히 있도록 하는 작업 - 그리드 

그리드의 개념, grid.html을 생성하고 개념을 이해해보자.

  NAVIGATION ARTICLE 을 적고 각 단어에 테두리를 주고 나란히 놓아볼 것.
=> 각각 어떤 태그로 묶어줘야 됨. => 그러면 <h1> 태그를? 아니다.
<h1>태그는 제목이라는 의미가 있기 때문이고, 

우리는 디자인이라는 목적을 위해서 어떠한 의미도 존재하지 않는 태그
=> <div> 태그, 아무런 의미가 없는 태그 그러나,
이 태그는 기본적으로 block level element 이기 때문에 화면 전체를 쓰고 
줄바꿈이 된다.

<div> NAVIGATION </div>   =>   웹페이지에서  NAVIAGTION
<div> ARTICLE </div>                                    ARTICLE        로 뜬다.

AND

똑같은 목적으로 나온 inline elements인 태그가 있음.
=> <span>,

<span> NAVIGATION </span>   => 웹페이지에서
<span> ARTICLE </span>              NAVIGATION ARTICLE 로 뜬다.


<div>를 선택자로

  div{
        border:5px solid gray;
      } 

부피감이 생김.

NAVIGATIONr 과 ARTICLE 을 나란히 놓기 위해서는
최신방법인 그리드를 이용할 것이고 그걸 위해선 저 두 개의 태그를 감싸는 
부모태그 필요함. (마찬가지로 <div> 태그를 이용하고 <div id="gird"> 를 추가
그리고 부모태그에 id="grid" 작성(id의 값은 아무거나 해도 상관 없음 "asdf" 이렇게)

    <body>
    <div id="grid">
      <div>NAVIGATION</div>
      <div>ARTICLE</div>
    </div>
  </body>

그리고 <title> 태그 안에 있는 <style> 태그 안에 gird를 선택자로 하여

  #grid{
        border:5px solid pink;
      } 

추가함.

두 개의 태그를 나란히 배치하고 싶으면 그것을 감싸는 부모태그가 필요함.
디자인의 목적만으로 <div id="grid">를 만든 것임.

두 개의 요소(navigation, article)을 하나의 columns에 배치하고 싶으므로
display:grid(해도 아무 변화는 없음) 와 grid-template-columns 을 추가

또 navigation의 columns은 고정하고 싶고, article이라는 columns은 나머지 공간을
다쓴다는 의미로 150px(사이즈 고정), 1fr 로 지정함. 

1fr은 무엇일까?

만약 두 요소가 모두 1fr 1fr이면 반반씩 나눠먹기

2fr 1fr이면 전체화면의 비율 2:1로 나눠먹기라 생각하면 간단함(나중에 직접 해보기)

화면 전체를 3fr이라 했을때 n fr , m fr n:m 비율로 자동으로 조정되게 해주는 단위

***그리드가 좋은 이유 

NAVIGATION 은 그대로 두고 ARTICLE 요소를 다른 본문의 내용으로 바꾸게 되면
본문의 텍스트가 많아짐에 따라 ARTICLE 자리에 바뀐 본문의 내용 테두리도 그렇고
NAVIGATION 요소의 테두리와 크기도 자동으로 조정되고 커진다.
(https://youtu.be/M1eQFIBY2vI 영상 8:00부터 참고)

CANIUSE 사이트, 
이 사이트는 여러 css, 자바스크립트 현재 웹브라우저들이
얼마나 그 기술들을 채택하고 있는지 통계를 보여주는 사이트

--------------------------

20) 그리드 써먹기

우리는 <ol>태그와 <h2>, <p>태그를 나란히 놓고 싶음.
독립적이라 묶어주고 싶음. 그렇다고 두 개를 묶어주기 위해, <h1> <li> <a>
태그를 쓸 수는 없음 => 따라서 아무 의미 없는 태그 <div>를 사용

=> <h2>, <p> 태그가 따로 놀고 있으므로(<ol>태그는 잘 위치해있음)
<div>로 한 번 묶어줌, 그 이후에 <ol>태그와 <h2>, <p> 태그가 묶여있는
<div>태그를 그리드를 사용하기 위한 하나의 요소로 사용하기 위해선
저 두 태그를 감싸는 부모태그가 필요한데 다시 한 번 <div>로 묶어줌
(안쪽 <div>와 바깥쪽 <div> 두 개가 생김)

결과물

*<div> 

  <ol> 
   ~
  </ol>

  **<div>
   <h2> ~ </h2>
      <p>
       ~
      </p>
   **</div>

*<div>


21) 바깥쪽 <div>를 그리드로 지정하기 위해서 바깥쪽 위에 <div>태그를
 => <div id="gird"> 그 이후에

선택자 gird를 이용해서 그리드 작성  => '그리드 소개' 영상 참고

#grid{
    display: grid;
    grid-template-columns: 150px 1fr;  
  }

22) <ol>태그 쪽 여백 
1. HTML
2. CSS
3. JavaScript 의 여백이 신경쓰임 => 여백을 없애보자, 검사실행(or F12)

<ol>태그를 눌러서 스크롤 내리면 Styles 박스 확인, padding 이 여백의 문제라는
것을 확인.

padding 아랫쪽 숫자 20을 더블클릭하여 숫자를 바꿔보고 괜찮은 숫자로 조정

그 이후에

ol { 

padding-left: 33px;(괜찮은 숫자였음)

그 이후에 뭔가 본문 내용(<h2>, <p>를 묶은 안쪽 <div>태그)이 살짝 선과 겹침
마찬가지로 본문내용 검사(or F12) => <div>태그가 문제인 것을 확인. 위와 같이
괜찮은 숫자 조정.

=> 안쪽 <div>태그에  <div id="article">로 변경  그 이후에

#article {
padding-left: 25px;(괜찮은 숫자였음)


이때의 문제점 <ol>태그가 지금은 네비게이션(150px 1fr)으로 쓰이고
있는데 <ol>이 나중에는 네비게이션이 아니라 본문에 리스트가 포함될 수도 
있으면 문제가 되기에, 

ol {  
 padding-left:33px;
}

=>                              ol을 #gird ol로 변경하여 모든 ol태그 중에서
부모가 grid은 태그만을 선택하는 것.

#grid ol {  
 padding-left:33px;
}
    


마찬가지로 #gird #article { padding-left:25px;도 가능하지만 id값이라 굳이 안해도
됨. 그래도 하는게 보기 좋음.

23) 미디어 쿼리 소개

약간의 기능 추가 -> 화면의 크기에 따라서 웹페이지의 각 요소들이 반응해서
최적화된 모양으로 변하게 하는것 // 반응형 웹, 반응형 디자인

이론 공부를 위해 mediaquery html 파일추가, 

  <title></title>
    <style>
      div{
        border:10px solid green;
        font-size:60px;
      }
    </style>

////////

  <body>
    <div>
      Responsive
    </div>
  </body>

추가해서 초록색 선으로 감싸진 Responsive 을 웹에 추가

1. 화면의 크기가 800px보다 크냐, 작으냐에 따라서 <div>태그를
보이게, 안보이게 하려고 함.

2. @media(min-width:800px) { => 최소 화면크기가 800이면
     div{
            display:none;         => 보이지 않게 해라
          } 
       }

결과물 :

   <style>
      div{
        border:10px solid green;
        font-size:60px;
      }
      @media(min-width:800px) 
       div{
         display:none;                                        
       }
     }
    </style>
                      
3. 화면크기가 800px이 넘는순간 Responsive가 안보임.

4. 화면크기가 최대 800px를 넘으면 안보이게 => 반대로 하면 되므로

@media(max-width:800px)
 
24) 미디어쿼리 써먹기


1. 2.html의 화면이 전체화면에서는 괜찮지만 줄이면 조금 어색해짐(본문이 너무 길
어져서 가독성 안좋아짐) 그래서 화면의 800px 기준으로 클 때와, 작을 때를 
미디어쿼리를 통해 바꿔보려 함.

위부터 보자, WEB은 가운데정렬로 보기 좋아서 괜찮음.

그렇다면 본문내용은?

본문 내용을 <div id="grid">~<div>를 grid가 아니게 하면됨.

선택자 grid를 복사

#grid{
    display: grid;
    grid-template-columns: 150px 1fr;
  }


을 @meida(max-width:800px{
   *이 안에 붙여넣기하고  grid-template-columns: 150px 1fr; 를 지우고 
     display: grid; => display: block; 으로 변경
           } 


변경 후

  @media(max-width:800px){
    #grid{
      display: block;
    }
=> 화면이 800px 보다 작으면 id="grid" 인 태그가 display :block;으로 변경됨.

block level elements가 되어 화면 전체를 쓰게 되고 
grid 안에 있지 못하고 본문내용이 아래로 내려가짐.

------------------------------------------------------------------------------



2. 변경하고 보니 목록 내용 옆에 있는 선이 보기 싫음. => 검사해서 찾아보니
<ol>태그가 문제 => <ol> 태그의 선택자를 유심히 본다 
=> <ol> 선택자의 border-right가 문제임. 따라서 미디어쿼리로 바꿔준다.

  @media(max-width:800px){
    #grid{
      display: block;
    }

에서

      ol{ 
         border-right: none;
         } 

을 추가한다.

  @media(max-width:800px){
    #grid{
      display: block;
    }
    ol{ 
         border-right: none;
    } 

=> 목록 옆에 있던 선이 사라짐.

----------------------------------------------------------------------

<h1> 태그 아래 있는 선도 좀 보기 싫음. 
=> <h1>태그의 선택자에서 border-bottom:1px solid gray; 가 문제이므로

@media 밑에 마찬가지로

h1 {
     border-bottom: none;  
     }
붙여줌

***해당 미디어쿼리는 기초 중의 기초고 더 복잡한 미디어쿼리는 직접 공부해서
응용하면 됨.  


25) CSS 코드의 재사용

<style>태그와 선택자를 통해 CSS를 짠건 좋지만 모든 html에 CSS를 붙여넣기
하는건 제한적인 숫자의 html이 아닌 많은 수의 html에 붙여넣기
하는 것은 매우 힘든 일 => 따라서 중복을 제거하는 작업이 필요

1. <style> 태그 안의 CSS 코드를 복사
2. style.css 파일을 만들어준다.
3. style.css 파일에서 복사한 CSS 코드를 붙여넣기함.
4. 다시 html로 돌아와서 <style> 태그를 포함한 CSS 코드를 지우고
  <link rel ="stylesheet" href="sytle.css"> 를 그자리에 써준다.
5. 그러면 CSS코드가 있던 것처럼 CSS 코드가 잘 작동한다.

장점 : 작성한 CSS파일에서 수정만 해주면 수정한 CSS가 
<link rel ="stylesheet" href="sytle.css">를 붙여넣기한 모든 html에 자동으로
적용되는 매우 편리한 기능.

****대신 1.html , 3.html, index.html 등에서
<h2>와<p>을 묶은 <div>자식태그와 
<div>자식태그와 <ol>을 크게 감싼 부모태그로 감싸주는건 직접 써줘야됨.
(3.html과 index.html을 보면 이해잘됨)

*****코드가 줄었기 때문에 인터넷의 사용료가 줄어든다는 네트워크 장점이 있음.
개발자 도구를 키고 검사하면 어떤파일을 웹서버에서 다운받는지 뜨는 것을 보면

1.html , style.css를 다운받아서 웹페이지에 적용한 것임.

원래는 html 태그 안에 직접 CSS를 기재하는 것이 트래픽 면에서 좋지만
'캐싱' 때문에 따로 style.css를 웹서버에서 다운받아서 사용하는 것이 좋음.
(style.css 파일을 따로 만드는 행위가 다운받아 사용하는 것이라 생각하면됨)

why? reason :

우리가 한 번 CSS파일을 다운받았다면 저 파일이 바뀌기 전까지는 style.css 
파일을 웹페이지에서 기억하여 우리의 컴퓨터에 저장해 놨다가 
그 다음에 style.css 파일을 또 요청하면 그 저장된 결과를 가져와서 속도를 
높일 수 있다(네트워크를 안쓰기 때문에) 따라서 사업자는 네트워크 트래픽
사용료를 적게 낼 수 있다는 결과를 도출해냄.

=> '캐싱'으로 인해 별도의 파일을 만들어서 중복의 제거를 하는 것이 효율적이다.
유지보수, 가독성 모든 면에서 좋음.

26) 수업을 마치며 

'속성'을 많이 알수록 더 풍부한 표현력,
'선택자'를 많이 알수록 우리가 알고 있는 속성을 더 많이 표현할 수 있음.

속성 - 선택자 관계 CSS의 중요한 뿌리
